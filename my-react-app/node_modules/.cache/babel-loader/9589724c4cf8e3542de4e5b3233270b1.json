{"ast":null,"code":"var _jsxFileName = \"/workspace/fewd_p5_integration/my-react-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Sketch from 'react-p5';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.y = 0;\n    this.direction = '^';\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }\n    }, \"react-p5\"), /*#__PURE__*/React.createElement(Sketch, {\n      setup: (p5, parentRef) => {\n        p5.createCanvas(200, 200).parent(parentRef);\n        p5.fill(240);\n        p5.noStroke();\n      },\n      snowflake: p5 => {\n        // snowflake class\n        function snowflake() {\n          // initialize coordinates\n          this.posX = 0;\n          this.posY = random(-50, 0);\n          this.initialangle = random(0, 2 * PI);\n          this.size = random(2, 5); // radius of snowflake spiral\n          // chosen so the snowflakes are uniformly spread out in area\n\n          this.radius = sqrt(random(pow(width / 2, 2)));\n\n          this.update = function (time) {\n            // x position follows a circle\n            let w = 0.6; // angular speed\n\n            let angle = w * time + this.initialangle;\n            this.posX = width / 2 + this.radius * sin(angle); // different size snowflakes fall at slightly different y speeds\n\n            this.posY += pow(this.size, 0.5); // delete snowflake if past end of screen\n\n            if (this.posY > height) {\n              let index = snowflakes.indexOf(this);\n              snowflakes.splice(index, 1);\n            }\n          };\n\n          this.display = function () {\n            ellipse(this.posX, this.posY, this.size);\n          };\n        }\n      },\n      draw: p5 => {\n        p5.background('pink');\n        let t = p5.frameCount / 60; // update time\n        // create a random number of snowflakes each frame\n\n        for (let i = 0; i < p5.random(5); i++) {\n          p5.snowflakes.push(new snowflake()); // append snowflake object\n        } // loop through snowflakes with a for..of loop\n\n\n        for (let flake of p5.snowflakes) {\n          p5.flake.update(t); // update snowflake position\n\n          p5.flake.display(); // draw snowflake\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 17\n  }\n}), rootElement);","map":{"version":3,"sources":["/workspace/fewd_p5_integration/my-react-app/src/index.js"],"names":["React","ReactDOM","Sketch","App","Component","y","direction","render","p5","parentRef","createCanvas","parent","fill","noStroke","snowflake","posX","posY","random","initialangle","PI","size","radius","sqrt","pow","width","update","time","w","angle","sin","height","index","snowflakes","indexOf","splice","display","ellipse","background","t","frameCount","i","push","flake","rootElement","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Sketch from 'react-p5';\n\n\nclass App extends React.Component {\n    y = 0;\n    direction = '^';\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>react-p5</h1>\n                <Sketch\n                    setup={(p5, parentRef) => {\n                        p5.createCanvas(200, 200).parent(parentRef);\n                        p5.fill(240);\n                        p5.noStroke();\n                    }}\n\n                     snowflake={p5 => {\n                        // snowflake class\n                        function snowflake() {\n                            // initialize coordinates\n                            this.posX = 0;\n                            this.posY = random(-50, 0);\n                            this.initialangle = random(0, 2 * PI);\n                            this.size = random(2, 5);\n\n                            // radius of snowflake spiral\n                            // chosen so the snowflakes are uniformly spread out in area\n                            this.radius = sqrt(random(pow(width / 2, 2)));\n\n                            this.update = function (time) {\n                                // x position follows a circle\n                                let w = 0.6; // angular speed\n                                let angle = w * time + this.initialangle;\n                                this.posX = width / 2 + this.radius * sin(angle);\n\n                                // different size snowflakes fall at slightly different y speeds\n                                this.posY += pow(this.size, 0.5);\n\n                                // delete snowflake if past end of screen\n                                if (this.posY > height) {\n                                    let index = snowflakes.indexOf(this);\n                                    snowflakes.splice(index, 1);\n                                }\n                            };\n\n                            this.display = function () {\n                                ellipse(this.posX, this.posY, this.size);\n                            };\n                        }\n                    }}\n\n                    draw={p5 => {\n                        p5.background('pink');\n                        let t = p5.frameCount / 60; // update time\n\n                        // create a random number of snowflakes each frame\n                        for (let i = 0; i < p5.random(5); i++) {\n                            p5.snowflakes.push(new snowflake()); // append snowflake object\n                        }\n\n                        // loop through snowflakes with a for..of loop\n                        for (let flake of p5.snowflakes) {\n                            p5.flake.update(t); // update snowflake position\n                            p5.flake.display(); // draw snowflake\n                        }\n                    }}\n\n                \n                />\n            </div>\n        );\n    }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);"]},"metadata":{},"sourceType":"module"}