{"ast":null,"code":"var _jsxFileName = \"/workspace/fewd_p5_integration/my-react-app/src/Snowflake.js\";\nimport React from 'react';\nimport Sketch from 'react-p5';\nimport './style.css';\n\nclass Snowflake extends React.Component {\n  render() {\n    let snowflakes = [];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }\n    }, \"Floating Snowflakes\"), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://p5js.org/examples/simulate-snowflakes.html\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }\n    }, \"Original Sketch reference \"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Sketch, {\n      setup: (p5, parentRef) => {\n        p5.createCanvas(700, 500).parent(parentRef);\n        p5.fill(240);\n        p5.noStroke();\n      },\n      draw: p5 => {\n        p5.background('#8B0000');\n        let t = p5.frameCount / 60; // update time\n        // create a random number of snowflakes each frame\n\n        for (let i = 0; i < p5.random(5); i++) {\n          snowflakes.push(new snowflake()); // append snowflake object\n        } // loop through snowflakes with a for..of loop\n\n\n        for (let flake of snowflakes) {\n          flake.update(t); // update snowflake position\n\n          flake.display(); // draw snowflake\n        } // snowflake class\n\n\n        function snowflake() {\n          // initialize coordinates\n          this.posX = 0;\n          this.posY = p5.random(-50, 0);\n          this.initialangle = p5.random(0, 2 * p5.PI);\n          this.size = p5.random(2, 5); // radius of snowflake spiral\n          // chosen so the snowflakes are uniformly spread out in area\n\n          this.radius = p5.sqrt(p5.random(p5.pow(p5.width / 2, 2)));\n\n          this.update = function (time) {\n            // x position follows a circle\n            let w = 0.6; // angular speed\n\n            let angle = w * time + this.initialangle;\n            this.posX = p5.width / 2 + this.radius * p5.sin(angle); // different size snowflakes fall at slightly different y speeds\n\n            this.posY += p5.pow(this.size, 0.5); // delete snowflake if past end of screen\n\n            if (this.posY > p5.height) {\n              let index = snowflakes.indexOf(this);\n              snowflakes.splice(index, 1);\n            }\n          };\n\n          this.display = function () {\n            p5.ellipse(this.posX, this.posY, this.size);\n          };\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Snowflake;","map":{"version":3,"sources":["/workspace/fewd_p5_integration/my-react-app/src/Snowflake.js"],"names":["React","Sketch","Snowflake","Component","render","snowflakes","p5","parentRef","createCanvas","parent","fill","noStroke","background","t","frameCount","i","random","push","snowflake","flake","update","display","posX","posY","initialangle","PI","size","radius","sqrt","pow","width","time","w","angle","sin","height","index","indexOf","splice","ellipse"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Sketch from 'react-p5';\nimport './style.css';\n\nclass Snowflake extends React.Component {\n\n    render() {\n        let snowflakes = [];\n\n        return (\n            <div className=\"center\">\n                <h1>Floating Snowflakes</h1>\n                <a href=\"https://p5js.org/examples/simulate-snowflakes.html\">Original Sketch reference </a>\n                <hr />\n                <Sketch\n                    setup={(p5, parentRef) => {\n                        p5.createCanvas(700, 500).parent(parentRef);\n                        p5.fill(240);\n                        p5.noStroke();\n\n                    \n\n                    }}\n                    draw={p5 => {\n                        p5.background('#8B0000');\n                        let t = p5.frameCount / 60; // update time\n\n                        // create a random number of snowflakes each frame\n                        for (let i = 0; i < p5.random(5); i++) {\n                            snowflakes.push(new snowflake()); // append snowflake object\n                        }\n\n                        // loop through snowflakes with a for..of loop\n                        for (let flake of snowflakes) {\n                            flake.update(t); // update snowflake position\n                            flake.display(); // draw snowflake\n                        }\n\n                        // snowflake class\n                        function snowflake() {\n                            // initialize coordinates\n                            this.posX = 0;\n                            this.posY = p5.random(-50, 0);\n                            this.initialangle = p5.random(0, 2 * p5.PI);\n                            this.size = p5.random(2, 5);\n\n                            // radius of snowflake spiral\n                            // chosen so the snowflakes are uniformly spread out in area\n                            this.radius = p5.sqrt(p5.random(p5.pow(p5.width / 2, 2)));\n\n                            this.update = function (time) {\n                                // x position follows a circle\n                                let w = 0.6; // angular speed\n                                let angle = w * time + this.initialangle;\n                                this.posX = p5.width / 2 + this.radius * p5.sin(angle);\n\n                                // different size snowflakes fall at slightly different y speeds\n                                this.posY += p5.pow(this.size, 0.5);\n\n                                // delete snowflake if past end of screen\n                                if (this.posY > p5.height) {\n                                    let index = snowflakes.indexOf(this);\n                                    snowflakes.splice(index, 1);\n                                }\n                            };\n\n                            this.display = function () {\n                                p5.ellipse(this.posX, this.posY, this.size);\n                            };\n                        }\n\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Snowflake;"]},"metadata":{},"sourceType":"module"}